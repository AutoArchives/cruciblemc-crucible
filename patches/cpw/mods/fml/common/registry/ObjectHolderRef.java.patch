--- ../src-base/minecraft/cpw/mods/fml/common/registry/ObjectHolderRef.java
+++ ../src-work/minecraft/cpw/mods/fml/common/registry/ObjectHolderRef.java
@@ -1,5 +1,7 @@
 package cpw.mods.fml.common.registry;
 
+import java.lang.invoke.MethodHandle;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
@@ -74,16 +76,19 @@
     {
         try
         {
-            if (modifiersField == null)
-            {
-                Method getReflectionFactory = Class.forName("sun.reflect.ReflectionFactory").getDeclaredMethod("getReflectionFactory");
-                reflectionFactory = getReflectionFactory.invoke(null);
-                newFieldAccessor = Class.forName("sun.reflect.ReflectionFactory").getDeclaredMethod("newFieldAccessor", Field.class, boolean.class);
-                fieldAccessorSet = Class.forName("sun.reflect.FieldAccessor").getDeclaredMethod("set", Object.class, Object.class);
-                modifiersField = Field.class.getDeclaredField("modifiers");
-                modifiersField.setAccessible(true);
-            }
-            modifiersField.setInt(f, f.getModifiers() & ~Modifier.FINAL);
+            // Crucible start - implement lwjgl3ify patch directly
+//            if (modifiersField == null)
+//            {
+//                Method getReflectionFactory = Class.forName("sun.reflect.ReflectionFactory").getDeclaredMethod("getReflectionFactory");
+//                reflectionFactory = getReflectionFactory.invoke(null);
+//                newFieldAccessor = Class.forName("sun.reflect.ReflectionFactory").getDeclaredMethod("newFieldAccessor", Field.class, boolean.class);
+//                fieldAccessorSet = Class.forName("sun.reflect.FieldAccessor").getDeclaredMethod("set", Object.class, Object.class);
+//                modifiersField = Field.class.getDeclaredField("modifiers");
+//                modifiersField.setAccessible(true);
+//            }
+//            modifiersField.setInt(f, f.getModifiers() & ~Modifier.FINAL);
+            f.setAccessible(true);
+            // Crucible end
         } catch (Exception e)
         {
             throw Throwables.propagate(e);
@@ -94,39 +99,80 @@
     {
         return isBlock || isItem;
     }
+
+    private MethodHandle fieldSetter = null; // Crucible - needed by lwjgl3ify
     public void apply()
     {
+        // Crucible start - implement lwjgl3ify patch directly
+//        Object thing;
+//        if (isBlock)
+//        {
+//            thing = GameData.getBlockRegistry().getObject(injectedObject);
+//            if (thing == Blocks.air)
+//            {
+//                thing = null;
+//            }
+//        }
+//        else if (isItem)
+//        {
+//            thing = GameData.getItemRegistry().getObject(injectedObject);
+//        }
+//        else
+//        {
+//            thing = null;
+//        }
+//
+//        if (thing == null)
+//        {
+//            FMLLog.getLogger().log(Level.DEBUG, "Unable to lookup {} for {}. This means the object wasn't registered. It's likely just mod options.", injectedObject, field);
+//            return;
+//        }
+//        try
+//        {
+//            Object fieldAccessor = newFieldAccessor.invoke(reflectionFactory, field, false);
+//            fieldAccessorSet.invoke(fieldAccessor, null, thing);
+//        }
+//        catch (Exception e)
+//        {
+//            FMLLog.log(Level.WARN, e, "Unable to set %s with value %s (%s)", this.field, thing, this.injectedObject);
+//        }
+        if (fieldSetter == null) {
+            try {
+                fieldSetter = MethodHandles.lookup()
+                  .unreflectSetter(this.field);
+            } catch (IllegalAccessException e) {
+                throw new RuntimeException(e);
+            }
+        }
         Object thing;
-        if (isBlock)
-        {
-            thing = GameData.getBlockRegistry().getObject(injectedObject);
-            if (thing == Blocks.air)
-            {
+        if (isBlock) {
+            thing = GameData.getBlockRegistry()
+              .getObject(injectedObject);
+            if (thing == Blocks.air) {
                 thing = null;
             }
-        }
-        else if (isItem)
-        {
-            thing = GameData.getItemRegistry().getObject(injectedObject);
-        }
-        else
-        {
+        } else if (isItem) {
+            thing = GameData.getItemRegistry()
+              .getObject(injectedObject);
+        } else {
             thing = null;
         }
 
-        if (thing == null)
-        {
-            FMLLog.getLogger().log(Level.DEBUG, "Unable to lookup {} for {}. This means the object wasn't registered. It's likely just mod options.", injectedObject, field);
+        if (thing == null) {
+            FMLLog.getLogger()
+              .log(
+                Level.DEBUG,
+                "Unable to lookup {} for {}. This means the object wasn't registered. It's likely just mod options.",
+                injectedObject,
+                field);
             return;
         }
-        try
-        {
-            Object fieldAccessor = newFieldAccessor.invoke(reflectionFactory, field, false);
-            fieldAccessorSet.invoke(fieldAccessor, null, thing);
-        }
-        catch (Exception e)
-        {
+        try {
+            fieldSetter.invoke(thing);
+            FMLLog.finer("Set field " + field.toString() + " to " + thing);
+        } catch (Throwable e) {
             FMLLog.log(Level.WARN, e, "Unable to set %s with value %s (%s)", this.field, thing, this.injectedObject);
         }
+        // Crucible end
     }
 }
